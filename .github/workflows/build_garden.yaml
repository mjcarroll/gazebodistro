name: C++ CI Workflow with conda-forge dependencies

on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - collection-garden.yaml
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

env:
  CACHE_NUMBER: 0

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019, macos-latest]
      fail-fast: false

    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    env:
      # Workspace file to use for the build
      VCS_WORKSPACE_FILE: collection-garden.yaml
      COLCON_BUILD_ARGS: ""
      COLCON_TEST_ARGS: ""

      # Things that control build
      COLCON_DEFAULTS_FILE: ${{ github.workspace }}/.github/ci/colcon_defaults.yaml
      BUILDCACHE_MAX_CACHE_SIZE: 2000000000                      # optional: Need a bigger cache?
      BUILDCACHE_LOG_FILE: ${{ matrix.label }}.buildcache.log    # optional: include log output
      BUILDCACHE_DEBUG: 2                                        # optional: debug level, less is more
      BUILDCACHE_DIRECT_MODE: true                               # optional: Allow direct caching
    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest

    - uses: mikehardy/buildcache-action@v1
      with:
        cache_key: ${{ matrix.label }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        upload_buildcache_log: 'false' # optional: 100% cache misses? Find out why
        zero_buildcache_stats: 'true' # optional: lifetime vs per-run stats?

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults
        mamba install cmake compilers make ninja pkg-config colcon-common-extensions
        mamba install cppzmq curl eigen ffmpeg freeimage gdal git glib gts jsoncpp libzip protobuf pybind11 qt ruby tinyxml tinyxml2 urdfdom vcstool zeromq
        mamba install ogre ogre-next dartsim

    - name: Linux-only Dependencies [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # See https://github.com/robotology/robotology-superbuild/issues/477
        mamba install expat-cos6-x86_64 libselinux-cos6-x86_64 libxau-cos6-x86_64 libxcb-cos6-x86_64 libxdamage-cos6-x86_64 libxext-cos6-x86_64 libxfixes-cos6-x86_64 libxxf86vm-cos6-x86_64 mesalib mesa-libgl-cos6-x86_64 mesa-libgl-devel-cos6-x86_64 libuuid

    - name: Unix-only Dependencies [Linux&macOS]
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      shell: bash -l {0}
      run: |
        mamba install libtar

    - name: Windows-only Dependencies [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install vs2019_win-64 dlfcn-win32 tiny-process-library

    - name: Export compiler variables [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        echo "CC=x86_64-conda-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=x86_64-conda-linux-gnu-g++" >> $GITHUB_ENV

    - name: Export compiler variables [macOS]
      if: contains(matrix.os, 'macos')
      shell: bash -l {0}
      run: |
        echo "CC=x86_64-apple-darwin13.4.0-clang" >> $GITHUB_ENV
        echo "CXX=x86_64-apple-darwin13.4.0-clang++" >> $GITHUB_ENV

    - name: Checkout Workspace [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p workspace/src
        echo "::group::vcs import"
        vcs import --input ${{ env.VCS_WORKSPACE_FILE }} --shallow workspace/src
        echo "::endgroup::"

    - name: Build Workspace [Linux&macOS]
      if: (contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')) && success()
      shell: bash -l {0}
      run: |
        cd workspace
        echo "::group::Workspace Branches"
        vcs branch
        echo "::endgroup::"
        colcon build ${{ env.COLCON_BUILD_ARGS }}

    - name: Checkout Workspace [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C call {0}
      run: |
        mkdir workspace\src
        echo "::group::vcs import"
        vcs import --input ${{ env.VCS_WORKSPACE_FILE }} --shallow workspace\src
        echo "::endgroup::"

    - name: Build Workspace [Windows]
      if: contains(matrix.os, 'windows') && success()
      shell: cmd /C call {0}
      run: |
        cd workspace
        set
        where cl.exe
        colcon build ${{ env.COLCON_BUILD_ARGS }}
