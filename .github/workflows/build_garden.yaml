name: C++ CI Workflow with conda-forge dependencies

on:
  push:
    branches:
      - master
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

# Every time you make a push to your PR, it cancel immediately the previous checks,
# and start a new one. The other runner will be available more quickly to your PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE_NUMBER: 0

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        collection: [garden, harmonic]
      fail-fast: false

    name: '[${{ matrix.os }}@${{ matrix.collection }}@conda]'
    runs-on: ${{ matrix.os }}
    env:
      # Workspace file to use for the build
      VCS_WORKSPACE_FILE: collection-${{ matrix.collection }}.yaml
      COLCON_BUILD_ARGS: ""
      COLCON_TEST_ARGS: ""

      # Things that control build
      COLCON_DEFAULTS_FILE: ${{ github.workspace }}/.github/ci/colcon_defaults.yaml
      BUILDCACHE_MAX_CACHE_SIZE: 2000000000                      # optional: Need a bigger cache?
      BUILDCACHE_LOG_FILE: ${{ matrix.label }}.buildcache.log    # optional: include log output
      BUILDCACHE_DEBUG: 2                                        # optional: debug level, less is more
      BUILDCACHE_DIRECT_MODE: true                               # optional: Allow direct caching
    steps:
    - uses: actions/checkout@v4

    - uses: mikehardy/buildcache-action@v2
      with:
        cache_key: ${{ matrix.label }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        upload_buildcache_log: 'false' # optional: 100% cache misses? Find out why
        zero_buildcache_stats: 'true' # optional: lifetime vs per-run stats?

    - name: Install Pixi
      run: |
        curl -fsSL https://pixi.sh/install.sh | bash
        echo "/home/runner/.pixi/bin" >> $GITHUB_PATH

    - name: Install all dependencies
      run: |
        pixi install
        pixi info

    - name: Checkout Workspace
      shell: bash -l {0}
      run: |
        mkdir -p workspace/src
        echo "::group::vcs import"
        pixi run vcs import --input ${{ env.VCS_WORKSPACE_FILE }} --shallow workspace/src
        echo "::endgroup::"

    - name: Build Workspace
      if: success()
      shell: bash -l {0}
      run: |
        cd workspace
        echo "::group::Workspace Branches"
        pixi run vcs branch
        echo "::endgroup::"
        pixi run colcon build ${{ env.COLCON_BUILD_ARGS }}

  build_win:
    strategy:
      matrix:
        os: [windows-latest]
        collection: [garden, harmonic]
      fail-fast: false

    name: '[${{ matrix.os }}@${{ matrix.collection }}@conda]'
    runs-on: ${{ matrix.os }}
    env:
      # Workspace file to use for the build
      VCS_WORKSPACE_FILE: collection-${{ matrix.collection }}.yaml
      COLCON_BUILD_ARGS: ""
      COLCON_TEST_ARGS: ""

      # Things that control build
      COLCON_DEFAULTS_FILE: ${{ github.workspace }}/.github/ci/colcon_defaults.yaml
      BUILDCACHE_MAX_CACHE_SIZE: 2000000000                      # optional: Need a bigger cache?
      BUILDCACHE_LOG_FILE: ${{ matrix.label }}.buildcache.log    # optional: include log output
      BUILDCACHE_DEBUG: 2                                        # optional: debug level, less is more
      BUILDCACHE_DIRECT_MODE: true                               # optional: Allow direct caching
    steps:
    - uses: actions/checkout@v4

    - uses: mikehardy/buildcache-action@v2
      with:
        cache_key: ${{ matrix.label }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        upload_buildcache_log: 'false' # optional: 100% cache misses? Find out why
        zero_buildcache_stats: 'true' # optional: lifetime vs per-run stats?

    - name: Install Pixi
      run: |
        iwr -useb https://pixi.sh/install.ps1 | iex

    - name: Install all dependencies
      run: |
        pixi install
        pixi info

    - name: Checkout Workspace
      run: |
        mkdir workspace\src
        echo "::group::vcs import"
        pixi run vcs import --input ${{ env.VCS_WORKSPACE_FILE }} --shallow workspace\src
        echo "::endgroup::"

    - name: Build Workspace
      if: success()
      shell: bash -l {0}
      run: |
        cd workspace
        echo "::group::Workspace Branches"
        pixi run vcs branch
        echo "::endgroup::"
        pixi run colcon build ${{ env.COLCON_BUILD_ARGS }}
